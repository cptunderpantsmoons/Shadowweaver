import React, { useState } from "react";
import { MessageType } from "@/lib/tools";

interface ExploitGeneratorModalProps {
  isOpen: boolean;
  onClose: () => void;
  target: string;
  sendMessage: (message: any) => void;
}

const ExploitGeneratorModal: React.FC<ExploitGeneratorModalProps> = ({
  isOpen,
  onClose,
  target,
  sendMessage
}) => {
  const [exploitType, setExploitType] = useState("web");
  const [service, setService] = useState("http");
  const [port, setPort] = useState("80");
  const [options, setOptions] = useState("");
  const [generating, setGenerating] = useState(false);
  const [exploitCode, setExploitCode] = useState("");
  
  if (!isOpen) return null;
  
  const handleGenerateExploit = () => {
    setGenerating(true);
    setExploitCode("");
    
    const message = {
      type: MessageType.GENERATE_EXPLOIT,
      payload: {
        target,
        exploitType,
        service,
        port: parseInt(port, 10),
        options
      }
    };
    
    sendMessage(message);
    
    // Simulate response
    setTimeout(() => {
      setGenerating(false);
      setExploitCode(`# Exploit for ${target} on port ${port}\n# Generated by Weaver.OS\n
from metasploit import module\n
def exploit(target_ip, target_port):\n    # Setup payload\n    payload = b""\n    payload += b"GET /index.php?id=1' UNION SELECT 1,2,3,4,5,6,7,8,9,10-- - HTTP/1.1\\r\\n"\n    payload += b"Host: " + target_ip.encode() + b"\\r\\n"\n    payload += b"User-Agent: Mozilla/5.0\\r\\n"\n    payload += b"Connection: close\\r\\n\\r\\n"\n    
    # Send exploit\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((target_ip, target_port))\n        s.send(payload)\n        response = s.recv(4096)\n        s.close()\n        
        if b"MySQL" in response:\n            print("[+] SQL Injection successful!")\n            return True\n        else:\n            print("[-] Exploit failed")\n            return False\n    except Exception as e:\n        print(f"[-] Error: {e}")\n        return False`);
    }, 3000);
  };
  
  const handleExecuteExploit = () => {
    if (!exploitCode) return;
    
    sendMessage({
      type: MessageType.EXECUTE_EXPLOIT,
      payload: {
        target,
        code: exploitCode
      }
    });
    
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-cyber-black/80 z-50 flex items-center justify-center">
      <div className="absolute inset-10 bg-cyber-dark border border-cyber-red/30 rounded-lg shadow-lg overflow-auto">
        <div className="sticky top-0 bg-cyber-dark p-4 border-b border-cyber-red/30 flex justify-between items-center">
          <h2 className="font-rajdhani font-bold text-xl text-cyber-red">EXPLOIT GENERATOR</h2>
          <button className="text-gray-400 hover:text-white" onClick={onClose}>
            <i className="fas fa-times"></i>
          </button>
        </div>
        
        <div className="p-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Configuration Panel */}
            <div className="space-y-4">
              <div className="bg-cyber-panel/60 p-4 rounded border border-cyber-red/20">
                <h3 className="font-rajdhani text-cyber-red mb-3">TARGET CONFIGURATION</h3>
                
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Target IP</label>
                    <input 
                      type="text" 
                      value={target} 
                      readOnly
                      className="w-full px-3 py-2 bg-cyber-black border border-cyber-red/30 rounded text-sm font-mono"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Exploit Type</label>
                    <select 
                      className="w-full px-3 py-2 bg-cyber-black border border-cyber-red/30 rounded text-sm"
                      value={exploitType}
                      onChange={(e) => setExploitType(e.target.value)}
                    >
                      <option value="web">Web Application</option>
                      <option value="remote">Remote Service</option>
                      <option value="local">Local Privilege Escalation</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Service</label>
                    <select 
                      className="w-full px-3 py-2 bg-cyber-black border border-cyber-red/30 rounded text-sm"
                      value={service}
                      onChange={(e) => setService(e.target.value)}
                    >
                      <option value="http">HTTP</option>
                      <option value="ssh">SSH</option>
                      <option value="ftp">FTP</option>
                      <option value="smb">SMB</option>
                      <option value="mysql">MySQL</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Port</label>
                    <input 
                      type="text" 
                      value={port} 
                      onChange={(e) => setPort(e.target.value)}
                      className="w-full px-3 py-2 bg-cyber-black border border-cyber-red/30 rounded text-sm font-mono"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm text-gray-400 mb-1">Additional Options</label>
                    <textarea 
                      value={options} 
                      onChange={(e) => setOptions(e.target.value)}
                      className="w-full px-3 py-2 bg-cyber-black border border-cyber-red/30 rounded text-sm font-mono h-24"
                      placeholder="Enter additional exploit options or parameters..."
                    />
                  </div>
                  
                  <button 
                    className="w-full py-2 px-4 bg-cyber-red/80 hover:bg-cyber-red text-white font-rajdhani font-medium rounded transition-colors"
                    onClick={handleGenerateExploit}
                    disabled={generating}
                  >
                    {generating ? (
                      <><i className="fas fa-cog fa-spin mr-2"></i> GENERATING EXPLOIT</>
                    ) : (
                      'GENERATE EXPLOIT'
                    )}
                  </button>
                </div>
              </div>
            </div>
            
            {/* Code Preview */}
            <div className="space-y-4">
              <div className="bg-cyber-panel/60 p-4 rounded border border-cyber-blue/20 h-full flex flex-col">
                <h3 className="font-rajdhani text-cyber-blue mb-3">EXPLOIT CODE</h3>
                
                {generating ? (
                  <div className="flex-1 flex items-center justify-center">
                    <div className="text-center">
                      <i className="fas fa-cog fa-spin text-cyber-red text-3xl"></i>
                      <p className="mt-2 text-sm text-gray-400">Building custom exploit...</p>
                    </div>
                  </div>
                ) : exploitCode ? (
                  <div className="flex-1 flex flex-col">
                    <div className="flex-1 bg-cyber-black rounded border border-cyber-blue/30 p-3 font-mono text-xs overflow-auto whitespace-pre">
                      {exploitCode}
                    </div>
                    
                    <div className="mt-4 flex space-x-3">
                      <button className="flex-1 py-2 px-4 bg-cyber-blue/20 text-cyber-blue border border-cyber-blue/50 hover:bg-cyber-blue/30 font-rajdhani font-medium rounded transition-colors">
                        SAVE EXPLOIT
                      </button>
                      <button 
                        className="flex-1 py-2 px-4 bg-cyber-green/20 text-cyber-green border border-cyber-green/50 hover:bg-cyber-green/30 font-rajdhani font-medium rounded transition-colors"
                        onClick={handleExecuteExploit}
                      >
                        TEST IN SANDBOX
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className="flex-1 flex items-center justify-center">
                    <p className="text-sm text-gray-400">
                      Configure target and generate an exploit to see the code here.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExploitGeneratorModal;
